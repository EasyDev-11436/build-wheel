--- src-original/source/py_gpio.c	2019-07-21 12:41:22.000000000 +0000
+++ src/source/py_gpio.c	2020-11-27 14:45:34.330456094 +0000
@@ -70,6 +70,22 @@
    }
 }
 
+
+// Chaquopy: moved nested function to top level to support Clang.
+static void cleanup_one(unsigned gpio, int *found)
+{
+  // clean up any /sys/class exports
+  event_cleanup(gpio);
+
+  // set everything back to input
+  if (gpio_direction[gpio] != -1) {
+    setup_gpio(gpio, INPUT, PUD_OFF);
+    gpio_direction[gpio] = -1;
+    *found = 1;
+  }
+}
+
+
 // python function cleanup(channel=None)
 static PyObject *py_cleanup(PyObject *self, PyObject *args, PyObject *kwargs)
 {
@@ -83,19 +99,6 @@
    PyObject *tempobj;
    static char *kwlist[] = {"channel", NULL};
 
-   void cleanup_one(void)
-   {
-      // clean up any /sys/class exports
-      event_cleanup(gpio);
-
-      // set everything back to input
-      if (gpio_direction[gpio] != -1) {
-         setup_gpio(gpio, INPUT, PUD_OFF);
-         gpio_direction[gpio] = -1;
-         found = 1;
-      }
-   }
-
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|O", kwlist, &chanlist))
       return NULL;
 
@@ -140,7 +143,7 @@
       } else if (channel != -666) {    // channel was an int indicating single channel
          if (get_gpio_number(channel, &gpio))
             return NULL;
-         cleanup_one();
+         cleanup_one(gpio, &found);
       } else {  // channel was a list/tuple
          for (i=0; i<chancount; i++) {
             if (chanlist) {
@@ -169,7 +172,7 @@
 
             if (get_gpio_number(channel, &gpio))
                return NULL;
-            cleanup_one();
+            cleanup_one(gpio, &found);
          }
       }
    }
@@ -182,10 +185,45 @@
    Py_RETURN_NONE;
 }
 
+
+// Chaquopy: moved nested function to top level to support Clang.
+static int setup_one(int channel, int pud, int direction, int initial) {
+   unsigned int gpio;
+   int func;
+
+   if (get_gpio_number(channel, &gpio))
+      return 0;
+
+   func = gpio_function(gpio);
+   if (gpio_warnings &&                             // warnings enabled and
+       ((func != 0 && func != 1) ||                 // (already one of the alt functions or
+       (gpio_direction[gpio] == -1 && func == 1)))  // already an output not set from this program)
+   {
+      PyErr_WarnEx(NULL, "This channel is already in use, continuing anyway.  Use GPIO.setwarnings(False) to disable warnings.", 1);
+   }
+
+   // warn about pull/up down on i2c channels
+   if (gpio_warnings) {
+      if (rpiinfo.p1_revision == 0) { // compute module - do nothing
+      } else if ((rpiinfo.p1_revision == 1 && (gpio == 0 || gpio == 1)) ||
+                 (gpio == 2 || gpio == 3)) {
+         if (pud == PUD_UP || pud == PUD_DOWN)
+            PyErr_WarnEx(NULL, "A physical pull up resistor is fitted on this channel!", 1);
+      }
+   }
+
+   if (direction == OUTPUT && (initial == LOW || initial == HIGH)) {
+      output_gpio(gpio, initial);
+   }
+   setup_gpio(gpio, direction, pud);
+   gpio_direction[gpio] = direction;
+   return 1;
+}
+
+
 // python function setup(channel(s), direction, pull_up_down=PUD_OFF, initial=None)
 static PyObject *py_setup_channel(PyObject *self, PyObject *args, PyObject *kwargs)
 {
-   unsigned int gpio;
    int channel = -1;
    int direction;
    int i, chancount;
@@ -195,37 +233,6 @@
    int pud = PUD_OFF + PY_PUD_CONST_OFFSET;
    int initial = -1;
    static char *kwlist[] = {"channel", "direction", "pull_up_down", "initial", NULL};
-   int func;
-
-   int setup_one(void) {
-      if (get_gpio_number(channel, &gpio))
-         return 0;
-
-      func = gpio_function(gpio);
-      if (gpio_warnings &&                             // warnings enabled and
-          ((func != 0 && func != 1) ||                 // (already one of the alt functions or
-          (gpio_direction[gpio] == -1 && func == 1)))  // already an output not set from this program)
-      {
-         PyErr_WarnEx(NULL, "This channel is already in use, continuing anyway.  Use GPIO.setwarnings(False) to disable warnings.", 1);
-      }
-
-      // warn about pull/up down on i2c channels
-      if (gpio_warnings) {
-         if (rpiinfo.p1_revision == 0) { // compute module - do nothing
-         } else if ((rpiinfo.p1_revision == 1 && (gpio == 0 || gpio == 1)) ||
-                    (gpio == 2 || gpio == 3)) {
-            if (pud == PUD_UP || pud == PUD_DOWN)
-               PyErr_WarnEx(NULL, "A physical pull up resistor is fitted on this channel!", 1);
-         }
-      }
-
-      if (direction == OUTPUT && (initial == LOW || initial == HIGH)) {
-         output_gpio(gpio, initial);
-      }
-      setup_gpio(gpio, direction, pud);
-      gpio_direction[gpio] = direction;
-      return 1;
-   }
 
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "Oi|ii", kwlist, &chanlist, &direction, &pud, &initial))
       return NULL;
@@ -290,7 +297,7 @@
    } else if (chantuple) {
        chancount = PyTuple_Size(chantuple);
    } else {
-       if (!setup_one())
+       if (!setup_one(channel, pud, direction, initial))
           return NULL;
        Py_RETURN_NONE;
    }
@@ -320,17 +327,37 @@
           return NULL;
       }
 
-      if (!setup_one())
+      if (!setup_one(channel, pud, direction, initial))
          return NULL;
    }
 
    Py_RETURN_NONE;
 }
 
+
+// Chaquopy: moved nested function to top level to support Clang.
+static int output_inner(int channel, int value) {
+   unsigned int gpio;
+   if (get_gpio_number(channel, &gpio))
+       return 0;
+
+   if (gpio_direction[gpio] != OUTPUT)
+   {
+      PyErr_SetString(PyExc_RuntimeError, "The GPIO channel has not been set up as an OUTPUT");
+      return 0;
+   }
+
+   if (check_gpio_priv())
+      return 0;
+
+   output_gpio(gpio, value);
+   return 1;
+}
+
+
 // python function output(channel(s), value(s))
 static PyObject *py_output_gpio(PyObject *self, PyObject *args)
 {
-   unsigned int gpio;
    int channel = -1;
    int value = -1;
    int i;
@@ -342,23 +369,6 @@
    int chancount = -1;
    int valuecount = -1;
 
-   int output(void) {
-      if (get_gpio_number(channel, &gpio))
-          return 0;
-
-      if (gpio_direction[gpio] != OUTPUT)
-      {
-         PyErr_SetString(PyExc_RuntimeError, "The GPIO channel has not been set up as an OUTPUT");
-         return 0;
-      }
-
-      if (check_gpio_priv())
-         return 0;
-
-      output_gpio(gpio, value);
-      return 1;
-   }
-
    if (!PyArg_ParseTuple(args, "OO", &chanlist, &valuelist))
        return NULL;
 
@@ -416,7 +426,7 @@
    }
 
    if (chancount == -1) {
-      if (!output())
+      if (!output_inner(channel, value))
          return NULL;
       Py_RETURN_NONE;
    }
@@ -472,7 +482,7 @@
               return NULL;
           }
       }
-      if (!output())
+      if (!output_inner(channel, value))
          return NULL;
    }
 
