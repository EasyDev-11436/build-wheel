diff --git a/setup.py b/setup.py
index fd653fe..110576c 100644
--- a/setup.py
+++ b/setup.py
@@ -9,9 +9,7 @@ import distutils.spawn
 import glob
 import shutil
 
-import torch
-from torch.utils.cpp_extension import BuildExtension, CppExtension, CUDAExtension, CUDA_HOME
-from torch.utils.hipify import hipify_python
+# Chaquopy: removed torch imports, which won't work when cross-compiling.
 
 
 def read(*names, **kwargs):
@@ -42,6 +40,9 @@ try:
 except Exception:
     pass
 
+# Chaquopy
+os.environ["BUILD_VERSION"] = os.environ["PKG_VERSION"]
+
 if os.getenv('BUILD_VERSION'):
     version = os.getenv('BUILD_VERSION')
 elif sha != 'Unknown':
@@ -58,6 +59,17 @@ def write_version_file():
         f.write("    cuda = _check_cuda_version()\n")
 
 
+# Chaquopy
+for path in sys.path:
+    torch_dir = f"{path}/torch"
+    if os.path.exists(torch_dir):
+        break
+else:
+    raise Exception("Failed to find torch on sys.path")
+version_dict = {}
+exec(open(f"{torch_dir}/version.py").read(), version_dict)
+os.environ["PYTORCH_VERSION"] = version_dict["__version__"]
+
 pytorch_dep = 'torch'
 if os.getenv('PYTORCH_VERSION'):
     pytorch_dep += "==" + os.getenv('PYTORCH_VERSION')
@@ -142,7 +154,7 @@ def get_extensions():
         os.path.join(extensions_dir, 'ops', 'cpu', '*.cpp'))
 
     is_rocm_pytorch = False
-    if torch.__version__ >= '1.5':
+    if False and torch.__version__ >= '1.5':  # Chaquopy: added False
         from torch.utils.cpp_extension import ROCM_HOME
         is_rocm_pytorch = True if ((torch.version.hip is not None) and (ROCM_HOME is not None)) else False
 
@@ -165,7 +177,7 @@ def get_extensions():
     source_cuda += glob.glob(os.path.join(extensions_dir, 'ops', 'autocast', '*.cpp'))
 
     sources = main_file + source_cpu
-    extension = CppExtension
+    extension = distutils.core.Extension  # Chaquopy: was CppExtension
 
     compile_cpp_tests = os.getenv('WITH_CPP_MODELS_TEST', '0') == '1'
     if compile_cpp_tests:
@@ -182,7 +194,8 @@ def get_extensions():
     define_macros = []
 
     extra_compile_args = {}
-    if (torch.cuda.is_available() and ((CUDA_HOME is not None) or is_rocm_pytorch)) \
+    # Chaquopy: replaced torch.cuda.is_available() with False.
+    if (False and ((CUDA_HOME is not None) or is_rocm_pytorch)) \
             or os.getenv('FORCE_CUDA', '0') == '1':
         extension = CUDAExtension
         sources += source_cuda
@@ -230,6 +243,7 @@ def get_extensions():
             'torchvision._C',
             sorted(sources),
             include_dirs=include_dirs,
+            libraries=["c10", "torch_cpu"],  # Chaquopy: added for -Wl,--no-undefined
             define_macros=define_macros,
             extra_compile_args=extra_compile_args,
         )
@@ -330,7 +344,12 @@ def get_extensions():
             extra_compile_args=extra_compile_args
         ))
 
-    ffmpeg_exe = distutils.spawn.find_executable('ffmpeg')
+    # Chaquopy: since we're not using torch.utils.cpp_extension, add the include paths it would
+    # have added.
+    include_dirs += [f"{torch_dir}/include/{path}"
+                     for path in ["", "torch/csrc/api/include", "TH", "THC"]]
+
+    ffmpeg_exe = None  # Chaquopy: was distutils.spawn.find_executable('ffmpeg')
     has_ffmpeg = ffmpeg_exe is not None
     print("FFmpeg found: {}".format(has_ffmpeg))
 
@@ -471,7 +490,7 @@ if __name__ == "__main__":
         },
         ext_modules=get_extensions(),
         cmdclass={
-            'build_ext': BuildExtension.with_options(no_python_abi_suffix=True),
+            # Chaquopy: disabled 'build_ext': BuildExtension.with_options(no_python_abi_suffix=True),
             'clean': clean,
         }
     )
diff --git a/torchvision/extension.py b/torchvision/extension.py
index 265c989..12a2839 100644
--- a/torchvision/extension.py
+++ b/torchvision/extension.py
@@ -40,7 +40,10 @@ def _register_extensions():
         importlib.machinery.EXTENSION_SUFFIXES
     )
 
-    extfinder = importlib.machinery.FileFinder(lib_dir, loader_details)
+    # Chaquopy: replaced hard-coded use of FileFinder.
+    import pkgutil
+    extfinder = pkgutil.get_importer(lib_dir)
+
     ext_specs = extfinder.find_spec("_C")
     if ext_specs is None:
         raise ImportError
