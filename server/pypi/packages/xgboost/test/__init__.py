import unittest


class TestXgboost(unittest.TestCase):

    # Based on https://github.com/dmlc/xgboost/blob/master/demo/guide-python/basic_walkthrough.py.
    def test_basic(self):
        from os.path import dirname, join
        import xgboost as xgb

        CURRENT_DIR = dirname(__file__)

        # load file from text file, also binary buffer generated by xgboost
        dtrain = xgb.DMatrix(join(CURRENT_DIR, 'agaricus.txt.train'), silent=True)
        dtest = xgb.DMatrix(join(CURRENT_DIR, 'agaricus.txt.test'), silent=True)

        # specify parameters via map, definition are same as c++ version
        param = {'max_depth': 2, 'eta': 1, 'objective': 'binary:logistic'}

        # specify validations set to watch performance
        watchlist = [(dtest, 'eval'), (dtrain, 'train')]
        num_round = 2
        bst = xgb.train(param, dtrain, num_round, watchlist, verbose_eval=False)

        # this is prediction
        preds = bst.predict(dtest)
        labels = dtest.get_label()
        error = (sum(1 for i in range(len(preds)) if int(preds[i] > 0.5) != labels[i]) /
                 float(len(preds)))
        self.assertGreater(error, 0)
        self.assertLess(error, 0.1)
