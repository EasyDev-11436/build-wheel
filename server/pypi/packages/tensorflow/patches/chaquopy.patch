--- src-original/configure.py   2020-01-07 16:57:39.000000000 +0000
+++ src/configure.py    2020-01-27 18:00:45.517619461 +0000
@@ -475,7 +475,9 @@
     print('Cannot find bazel. Please install bazel.')
     sys.exit(0)
   curr_version = run_shell(
-      ['bazel', '--batch', '--bazelrc=/dev/null', 'version'])
+      # Chaquopy: removed --batch, which causes any running bazel server to restart, slowing
+      # down reruns with build-wheel.py --no-unpack.
+      ['bazel', 'version'])
 
   for line in curr_version.split('\n'):
     if 'Build label: ' in line:
diff -urN --no-dereference src-original/tensorflow/BUILD src/tensorflow/BUILD
--- src-original/tensorflow/BUILD	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/BUILD	2019-03-11 11:40:27.633418445 +0000
@@ -57,6 +57,9 @@
 )
 
 # Config setting for determining if we are building for Android.
+#
+# Chaquopy: we are *not* changing this to be true, because it causes everywhere to assume we're
+# building the cut-down Android library, Instead, we add our own config_setting below.
 config_setting(
     name = "android",
     values = {"crosstool_top": "//external:android/crosstool"},
@@ -84,6 +87,19 @@
 )
 
 config_setting(
+    name = "chaquopy",
+    values = {"crosstool_top": "//chaquopy/crosstool"},
+    visibility = ["//visibility:public"],
+)
+
+# Used in third_party/hwloc/BUILD.bazel
+config_setting(
+    name = "chaquopy_x86_64",
+    values = {"cpu": "x86_64"},
+    visibility = ["//visibility:public"],
+)
+
+config_setting(
     name = "android_x86",
     values = {
         "crosstool_top": "//external:android/crosstool",
@@ -588,6 +604,7 @@
             "-lexecinfo",
         ],
         "//conditions:default": [
+            "-Wl,--no-undefined",  # Chaquopy: see build.sh
             "-Wl,--version-script,$(location //tensorflow:tf_framework_version_script.lds)",
         ],
     }),
--- src-original/tensorflow/core/platform/BUILD 2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/core/platform/BUILD  2020-01-26 13:56:50.320587878 +0000
@@ -275,6 +275,10 @@
     name = "logging",
     textual_hdrs = ["logging.h"],
     deps = tf_logging_deps(),
+    linkopts = select({
+        "//tensorflow:chaquopy": ["-llog"],
+        "//conditions:default": []
+    }),
 )
 
 cc_library(
diff -urN --no-dereference src-original/tensorflow/core/platform/platform.h src/tensorflow/core/platform/platform.h
--- src-original/tensorflow/core/platform/default/stacktrace.h  2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/core/platform/default/stacktrace.h   2020-01-23 16:55:47.716796388 +0000
@@ -21,7 +21,8 @@
 // clang-format on
 
 #if !defined(IS_MOBILE_PLATFORM) && (defined(__clang__) || defined(__GNUC__))
-#define TF_HAS_STACKTRACE
+// Chaquopy: disabled
+// #define TF_HAS_STACKTRACE
 #endif
 
 #if defined(TF_HAS_STACKTRACE)
--- src-original/tensorflow/core/platform/default/stacktrace_handler.cc 2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/core/platform/default/stacktrace_handler.cc  2020-01-23 16:03:55.829830861 +0000
@@ -17,7 +17,8 @@
 
 #if !defined(IS_MOBILE_PLATFORM) && defined(PLATFORM_POSIX) && \
     (defined(__clang__) || defined(__GNUC__))
-#define TF_GENERATE_STACKTRACE
+// Chaquopy: disabled
+// #define TF_GENERATE_STACKTRACE
 #endif
 
 #if defined(TF_GENERATE_STACKTRACE)
--- src-original/tensorflow/core/platform/platform.h	2018-08-23 19:58:44.000000000 +0000
+++ src/tensorflow/core/platform/platform.h	2018-09-20 20:49:57.361222382 +0000
@@ -26,7 +26,10 @@
 // Choose which platform we are on.
 #if defined(ANDROID) || defined(__ANDROID__)
 #define PLATFORM_POSIX_ANDROID
-#define IS_MOBILE_PLATFORM
+
+// Chaquopy disabled: this disables many types (tensorflow/core/framework/register_types.h),
+// including bfloat16, which tensorflow/core/kernels/list_kernels.cc uses unconditionally.
+// #define IS_MOBILE_PLATFORM
 
 #elif defined(__APPLE__)
 #define PLATFORM_POSIX
--- src-original/tensorflow/lite/kernels/internal/BUILD 2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/lite/kernels/internal/BUILD  2020-01-27 19:42:25.344688600 +0000
@@ -27,7 +27,7 @@
     ],
     ":armeabi-v7a": [
         "-O3",
-        "-mfpu=neon",
+        # Chaquopy: removed "-mfpu=neon" for reasons explained in chaquopy-openblas/build.sh.
     ],
     ":armv7a": [
         "-O3",
@@ -664,7 +664,12 @@
             ":neon_tensor_utils",
         ],
         ":armeabi-v7a": [
-            ":neon_tensor_utils",
+            # Chaquopy: removed neon_tensor_utils for reasons explained in
+            # chaquopy-openblas/build.sh. Also, neon_tensor_utils will fail to link, because it
+            # calls functions defined in tensorflow/lite/experimental/ruy, which guard NEON
+            # implementations with preprocessor macros such as __ARM_NEON, which won't be
+            # defined when building for this ABI.
+            ":portable_tensor_utils",
         ],
         ":armv7a": [
             ":neon_tensor_utils",
--- src-original/tensorflow/lite/toco/toco_port.cc      2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/lite/toco/toco_port.cc       2020-01-24 11:37:06.401541122 +0000
@@ -20,7 +20,7 @@
 #include "tensorflow/core/lib/core/status.h"
 #include "tensorflow/core/platform/logging.h"
 
-#if defined(__ANDROID__) && defined(__ARM_ARCH_7A__)
+#if 0 && defined(__ANDROID__) && defined(__ARM_ARCH_7A__)  // Chaquopy: all this is now in the NDK headers.
 namespace std {
 double round(double x) { return ::round(x); }
 }  // namespace std
--- src-original/tensorflow/lite/toco/toco_port.h       2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/lite/toco/toco_port.h        2020-01-24 11:37:06.413541550 +0000
@@ -34,7 +34,7 @@
 #define TFLITE_PROTO_NS google::protobuf
 #endif
 
-#ifdef __ANDROID__
+#if 0  // Chaquopy: was #ifdef __ANDROID__, but all this is now in the NDK headers.
 #include <sstream>
 namespace std {
 
--- src-original/tensorflow/python/BUILD        2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/python/BUILD 2020-01-27 17:03:35.450629139 +0000
@@ -5393,6 +5393,10 @@
          tf_additional_plugin_deps()) + if_ngraph([
         "@ngraph_tf//:ngraph_tf",
     ]),
+    linkopts = select({
+        "//tensorflow:chaquopy": ["-Wl,--no-undefined"],  # See build.sh
+        "//conditions:default": []
+    }),
 )
 
 # ** Targets for Windows build (start) **
--- src-original/tensorflow/python/platform/resource_loader.py  2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/python/platform/resource_loader.py   2020-01-26 16:57:51.561690191 +0000
@@ -114,7 +114,18 @@
     IOError: If the path is not found, or the resource can't be opened.
   """
   data_files_path = _os.path.dirname(_inspect.getfile(_sys._getframe(1)))
-  return _os.path.join(data_files_path, path)
+  # Chaquopy: this function is used to find .so files, which aren't automatically extracted
+  # unless they're loaded as Python modules.
+  result = _os.path.join(data_files_path, path)
+  if path.endswith(".so") and hasattr(__loader__, "finder"):  # This function also runs during the build.
+    importer = __loader__.finder
+    try:
+      importer.extract_if_changed(importer.zip_path(_os.path.abspath(result)))
+    except FileNotFoundError:
+      # Despite the docstring above, calling code expects us to return the path whether it
+      # exists or not (e.g. in tensorflow/lite/python/convert.py).
+      pass
+  return result
 
 
 @tf_export(v1=['resource_loader.readahead_file_path'])
diff -urN --no-dereference src-original/tensorflow/tensorflow.bzl src/tensorflow/tensorflow.bzl
--- src-original/tensorflow/tensorflow.bzl	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/tensorflow.bzl	2019-03-11 11:51:06.758703356 +0000
@@ -1912,6 +1912,7 @@
         swig_includes = [],
         deps = [],
         copts = [],
+        linkopts = [],  # Chaquopy: added for //tensorflow/python:pywrap_tensorflow_internal
         version_script = None,
         **kwargs):
     """Builds a Python extension module."""
@@ -1980,7 +1981,7 @@
             "-Wno-sign-compare",
             "-Wno-write-strings",
         ]),
-        linkopts = extra_linkopts,
+        linkopts = linkopts + extra_linkopts,
         linkstatic = 1,
         deps = deps + extra_deps,
         **kwargs
--- src-original/tensorflow/tools/pip_package/setup.py  2020-01-07 16:57:39.000000000 +0000
+++ src/tensorflow/tools/pip_package/setup.py   2020-01-22 21:04:51.015956206 +0000
@@ -75,6 +75,7 @@
     'six >= 1.12.0',
     # scipy < 1.4.1 causes segfaults due to pybind11
     # Latest scipy pip for py2 is scipy==1.2.2
-    'scipy == 1.4.1;python_version>="3"',
-    'scipy == 1.2.2;python_version<"3"',
+    # Chaquopy: SciPy isn't required (https://github.com/tensorflow/tensorflow/issues/35709)
+    # 'scipy == 1.4.1;python_version>="3"',
+    # 'scipy == 1.2.2;python_version<"3"',
 ]

 if sys.byteorder == 'little':
diff -urN --no-dereference src-original/tensorflow/workspace.bzl src/tensorflow/workspace.bzl
--- src-original/tensorflow/workspace.bzl	2019-02-25 20:37:04.000000000 +0000
+++ src/tensorflow/workspace.bzl	2019-03-11 14:28:54.452389887 +0000
@@ -462,6 +465,7 @@
     # WARNING: make sure ncteisen@ and vpai@ are cc-ed on any CL to change the below rule
     tf_http_archive(
         name = "grpc",
+        patch_file = clean_dep("//third_party/grpc:chaquopy.patch"),
         sha256 = "67a6c26db56f345f7cee846e681db2c23f919eba46dd639b09462d1b6203d28c",
         strip_prefix = "grpc-4566c2a29ebec0835643b972eb99f4306c4234a3",
         system_build_file = clean_dep("//third_party/systemlibs:grpc.BUILD"),
@@ -532,6 +536,7 @@
 
     tf_http_archive(
         name = "boringssl",
+        build_file = clean_dep("//third_party:boringssl.BUILD"),  # Chaquopy override
         sha256 = "1188e29000013ed6517168600fc35a010d58c5d321846d6a6dfee74e4c788b45",
         strip_prefix = "boringssl-7f634429a04abc48e2eb041c81c5235816c96514",
         system_build_file = clean_dep("//third_party/systemlibs:boringssl.BUILD"),
diff -urN --no-dereference src-original/third_party/aws/BUILD.bazel src/third_party/aws/BUILD.bazel
--- src-original/third_party/aws/BUILD.bazel	2019-02-25 20:37:04.000000000 +0000
+++ src/third_party/aws/BUILD.bazel	2019-03-11 16:58:31.534820702 +0000
@@ -24,7 +24,10 @@
         "@org_tensorflow//tensorflow:raspberry_pi_armeabi": glob([
             "aws-cpp-sdk-core/source/platform/linux-shared/*.cpp",
         ]),
-        "//conditions:default": [],
+        "//conditions:default": glob([
+            # Chaquopy: added
+            "aws-cpp-sdk-core/source/platform/linux-shared/*.cpp",
+        ]),
     }) + glob([
         "aws-cpp-sdk-core/include/**/*.h",
         "aws-cpp-sdk-core/source/*.cpp",
diff -urN --no-dereference src-original/third_party/boringssl.BUILD src/third_party/boringssl.BUILD
--- src-original/third_party/boringssl.BUILD	1970-01-01 00:00:00.000000000 +0000
+++ src/third_party/boringssl.BUILD	2018-09-20 20:49:57.365222384 +0000
@@ -0,0 +1,152 @@
+# Chaquopy: We've edited tensorflow/workspace.bzl to use this file.
+# 
+# Based on https://github.com/google/boringssl/blob/a0fb951d2a26a8ee746b52f3ba81ab011a0af778/BUILD.
+
+licenses(["notice"])
+
+exports_files(["LICENSE"])
+
+load(
+    ":BUILD.generated.bzl",
+    "crypto_headers",
+    "crypto_internal_headers",
+    "crypto_sources",
+    "crypto_sources_linux_x86_64",
+    "crypto_sources_mac_x86_64",
+    "fips_fragments",
+    "ssl_headers",
+    "ssl_internal_headers",
+    "ssl_sources",
+    "tool_sources",
+    "tool_headers",
+)
+
+config_setting(
+    name = "linux_x86_64",
+    values = {"cpu": "k8"},
+)
+
+config_setting(
+    name = "mac_x86_64",
+    values = {"cpu": "darwin"},
+)
+
+config_setting(
+    name = "windows_x86_64",
+    values = {"cpu": "x64_windows"},
+)
+
+config_setting(
+    name = "android",
+    values = {"crosstool_top": "//chaquopy/crosstool"},
+)
+
+
+posix_copts = [
+    # Assembler option --noexecstack adds .note.GNU-stack to each object to
+    # ensure that binaries can be built with non-executable stack.
+    "-Wa,--noexecstack",
+
+    # This is needed on Linux systems (at least) to get rwlock in pthread.
+    "-D_XOPEN_SOURCE=700",
+
+    # This list of warnings should match those in the top-level CMakeLists.txt.
+    "-Wall",
+    "-Werror",
+    "-Wformat=2",
+    "-Wsign-compare",
+    "-Wmissing-field-initializers",
+    "-Wwrite-strings",
+    "-Wshadow",
+    "-fno-common",
+
+    # Modern build environments should be able to set this to use atomic
+    # operations for reference counting rather than locks. However, it's
+    # known not to work on some Android builds.
+    # "-DOPENSSL_C11_ATOMIC",
+]
+
+
+# Chaquopy: we need to enable posix_copts and its variations, otherwise the -std flag would not
+# be passed and code requiring C++11 would fail to build.
+#
+# We also need -DOPENSSL_NO_ASM, otherwise the final binary somehow ends up with an undefined
+# reference to vpaes_decrypt
+# (https://boringssl.googlesource.com/boringssl/+/8adf4f1d891679df91e1d1551527b6fc0c8a7d15/crypto/cipher/e_aes.c#90).
+boringssl_copts = select({
+    ":android": posix_copts + ["-DOPENSSL_NO_ASM"],  # Chaquopy: added
+    ":linux_x86_64": posix_copts,
+    ":mac_x86_64": posix_copts,
+    ":windows_x86_64": [
+        "-DWIN32_LEAN_AND_MEAN",
+        "-DOPENSSL_NO_ASM",
+    ],
+    "//conditions:default": ["-DOPENSSL_NO_ASM"],
+})
+
+crypto_sources_asm = select({
+    ":linux_x86_64": crypto_sources_linux_x86_64,
+    ":mac_x86_64": crypto_sources_mac_x86_64,
+    "//conditions:default": [],
+})
+
+# For C targets only (not C++), compile with C11 support.
+posix_copts_c11 = [
+    "-std=c11",
+    "-Wmissing-prototypes",
+    "-Wold-style-definition",
+    "-Wstrict-prototypes",
+]
+
+boringssl_copts_c11 = boringssl_copts + select({
+    ":android": posix_copts_c11,  # Chaquopy: added
+    ":linux_x86_64": posix_copts_c11,
+    ":mac_x86_64": posix_copts_c11,
+    "//conditions:default": [],
+})
+
+# For C++ targets only (not C), compile with C++11 support.
+posix_copts_cxx = [
+    "-std=c++11",
+    "-Wmissing-declarations",
+]
+
+boringssl_copts_cxx = boringssl_copts + select({
+    ":android": posix_copts_cxx,  # Chaquopy: added
+    ":linux_x86_64": posix_copts_cxx,
+    ":mac_x86_64": posix_copts_cxx,
+    "//conditions:default": [],
+})
+
+cc_library(
+    name = "crypto",
+    srcs = crypto_sources + crypto_internal_headers + crypto_sources_asm,
+    hdrs = crypto_headers + fips_fragments,
+    copts = boringssl_copts_c11,
+    includes = ["src/include"],
+    linkopts = select({
+        ":mac_x86_64": [],
+        "//conditions:default": ["-lpthread"],
+    }),
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+    name = "ssl",
+    srcs = ssl_sources + ssl_internal_headers,
+    hdrs = ssl_headers,
+    copts = boringssl_copts_cxx,
+    includes = ["src/include"],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":crypto",
+    ],
+)
+
+cc_binary(
+    name = "bssl",
+    srcs = tool_sources + tool_headers,
+    copts = boringssl_copts_cxx,
+    visibility = ["//visibility:public"],
+    deps = [":ssl"],
+)
diff -urN --no-dereference src-original/third_party/gif.BUILD src/third_party/gif.BUILD
--- src-original/third_party/gif.BUILD	2018-08-23 19:58:44.000000000 +0000
+++ src/third_party/gif.BUILD	2018-09-20 20:49:57.365222384 +0000
@@ -66,5 +66,5 @@
 
 config_setting(
     name = "android",
-    values = {"crosstool_top": "//external:android/crosstool"},
+    values = {"crosstool_top": "//chaquopy/crosstool"},
 )
diff -urN src-original/third_party/grpc/chaquopy.patch src/third_party/grpc/chaquopy.patch
--- src-original/third_party/grpc/chaquopy.patch	1970-01-01 00:00:00.000000000 +0000
+++ src/third_party/grpc/chaquopy.patch 2019-03-06 20:33:50.086229265 +0000
@@ -0,0 +1,12 @@
+--- a/src/core/lib/gpr/wrap_memcpy.cc  2018-06-28 00:25:45.000000000 +0000
++++ b/src/core/lib/gpr/wrap_memcpy.cc  2019-03-06 20:31:01.440544707 +0000
+@@ -28,7 +28,8 @@
+
+ extern "C" {
+ #ifdef __linux__
+-#if defined(__x86_64__) && !defined(GPR_MUSL_LIBC_COMPAT)
++// Chaquopy disabled: build succeeds, but function hangs at runtime.
++#if 0 && defined(__x86_64__) && !defined(GPR_MUSL_LIBC_COMPAT)
+ __asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
+ void* __wrap_memcpy(void* destination, const void* source, size_t num) {
+   return memcpy(destination, source, num);
--- src-original/third_party/hwloc/BUILD.bazel  2020-01-07 16:57:39.000000000 +0000
+++ src/third_party/hwloc/BUILD.bazel   2020-01-24 11:13:46.451645375 +0000
@@ -66,8 +66,8 @@
     "#undef HAVE_DECL_GETPROGNAME": "#define HAVE_DECL_GETPROGNAME 0",
     "#undef HAVE_DECL_HW_NCPU": "#define HAVE_DECL_HW_NCPU 0",
     "#undef HAVE_DECL_MODFF": "#define HAVE_DECL_MODFF 1",
-    "#undef HAVE_DECL_PTHREAD_GETAFFINITY_NP": "#define HAVE_DECL_PTHREAD_GETAFFINITY_NP 1",
-    "#undef HAVE_DECL_PTHREAD_SETAFFINITY_NP": "#define HAVE_DECL_PTHREAD_SETAFFINITY_NP 1",
+    # "#undef HAVE_DECL_PTHREAD_GETAFFINITY_NP": "#define HAVE_DECL_PTHREAD_GETAFFINITY_NP 1",  # Chaquopy: not available on Android
+    # "#undef HAVE_DECL_PTHREAD_SETAFFINITY_NP": "#define HAVE_DECL_PTHREAD_SETAFFINITY_NP 1",  # Chaquopy: not available on Android
     "#undef HAVE_DECL_RUNNING_ON_VALGRIND": "#define HAVE_DECL_RUNNING_ON_VALGRIND 0",
     "#undef HAVE_DECL_SCHED_GETCPU": "#define HAVE_DECL_SCHED_GETCPU 1",
     "#undef HAVE_DECL_SNPRINTF": "#define HAVE_DECL_SNPRINTF 1",
@@ -110,7 +110,7 @@
     "#undef HAVE_SYS_MMAN_H": "#define HAVE_SYS_MMAN_H 1",
     "#undef HAVE_SYS_PARAM_H": "#define HAVE_SYS_PARAM_H 1",
     "#undef HAVE_SYS_STAT_H": "#define HAVE_SYS_STAT_H 1",
-    "#undef HAVE_SYS_SYSCTL_H": "#define HAVE_SYS_SYSCTL_H 1",
+    # "#undef HAVE_SYS_SYSCTL_H": "#define HAVE_SYS_SYSCTL_H 1",  # Chaquopy: not available on Android
     "#undef HAVE_SYS_TYPES_H": "#define HAVE_SYS_TYPES_H 1",
     "#undef HAVE_SYS_UTSNAME_H": "#define HAVE_SYS_UTSNAME_H 1",
     "#undef HAVE_TIME_H": "#define HAVE_TIME_H 1",
@@ -201,7 +201,7 @@
 }
 
 _INCLUDE_PRIVATE_HWLOC_AUTOIGEN_CONFIG_H_LINUX_SUBS = {
-    "#undef HAVE_PROGRAM_INVOCATION_NAME": "#define HAVE_PROGRAM_INVOCATION_NAME 1",
+    # "#undef HAVE_PROGRAM_INVOCATION_NAME": "#define HAVE_PROGRAM_INVOCATION_NAME 1",  # Chaquopy: not available on Android
     "#undef HWLOC_LINUX_SYS": "#define HWLOC_LINUX_SYS 1",
 }
 
@@ -260,6 +260,12 @@
             "hwloc/topology-linux.c",
             "include/hwloc/linux.h",
             "hwloc/topology-x86.c",
+            "include/private/cpuid-x86.h",
+        ],
+        "@org_tensorflow//tensorflow:chaquopy_x86_64": [
+            "hwloc/topology-linux.c",
+            "include/hwloc/linux.h",
+            "hwloc/topology-x86.c",
             "include/private/cpuid-x86.h",
         ],
         "@org_tensorflow//tensorflow:freebsd": [
diff -urN --no-dereference src-original/third_party/llvm/llvm.bzl src/third_party/llvm/llvm.bzl
--- src-original/third_party/llvm/llvm.bzl      2020-01-07 16:57:39.000000000 +0000
+++ src/third_party/llvm/llvm.bzl       2020-01-23 15:32:55.791574412 +0000
@@ -201,10 +201,10 @@
     "HAVE_ZLIB_H": 1,
 
     # Features
-    "HAVE_BACKTRACE": 1,
-    "BACKTRACE_HEADER": "execinfo.h",
+    # "HAVE_BACKTRACE": 1,  # Chaquopy: not available on Android
+    # "BACKTRACE_HEADER": "execinfo.h",
     "HAVE_DLOPEN": 1,
-    "HAVE_FUTIMES": 1,
+    # "HAVE_FUTIMES": 1,  # Chaquopy: requires API level 26
     "HAVE_GETCWD": 1,
     "HAVE_GETPAGESIZE": 1,
     "HAVE_GETRLIMIT": 1,
@@ -244,7 +244,7 @@
     "HAVE_MALLOC_H": 1,
     "HAVE_LINK_H": 1,
     "HAVE_MALLINFO": 1,
-    "HAVE_FUTIMENS": 1,
+    # "HAVE_FUTIMENS": 1,  # Chaquopy: requires API level 19
 }
 
 # CMake variables specific to the FreeBSD platform
diff -urN --no-dereference src-original/third_party/lmdb.BUILD src/third_party/lmdb.BUILD
--- src-original/third_party/lmdb.BUILD	2018-08-23 19:58:44.000000000 +0000
+++ src/third_party/lmdb.BUILD	2018-09-20 20:49:57.365222384 +0000
@@ -17,6 +17,7 @@
     ],
     copts = [
         "-w",
+        "-DANDROID",  # Chaquopy: our compiler only defines __ANDROID__.
     ],
     linkopts = select({
         ":windows": ["-DEFAULTLIB:advapi32.lib"],  # InitializeSecurityDescriptor, SetSecurityDescriptorDacl
--- src-original/third_party/mlir/lib/Transforms/DialectConversion.cpp  2020-01-07 16:57:39.000000000 +0000
+++ src/third_party/mlir/lib/Transforms/DialectConversion.cpp   2020-01-23 17:53:12.507867527 +0000
@@ -686,7 +686,7 @@
   for (auto &pair : llvm::enumerate(region)) {
     Block &block = pair.value();
     unsigned position = pair.index();
-    blockActions.push_back(BlockAction::getMove(&block, {&region, position}));
+    blockActions.push_back(BlockAction::getMove(&block, {&region, (int)position}));  // Chaquopy: added cast
   }
 }
 
diff -urN --no-dereference src-original/third_party/py/BUILD.tpl src/third_party/py/BUILD.tpl
--- src-original/third_party/py/BUILD.tpl	2018-08-23 19:58:44.000000000 +0000
+++ src/third_party/py/BUILD.tpl	2018-09-20 20:49:57.365222384 +0000
@@ -2,11 +2,17 @@
 
 package(default_visibility = ["//visibility:public"])
 
+config_setting(
+    name = "chaquopy",
+    values = {"crosstool_top": "//chaquopy/crosstool"},
+)
+
 # To build Python C/C++ extension on Windows, we need to link to python import library pythonXY.lib
 # See https://docs.python.org/3/extending/windows.html
 cc_import(
     name = "python_lib",
     interface_library = select({
+        ":chaquopy": ":python_import_lib",
         ":windows": ":python_import_lib",
         # A placeholder for Unix platforms which makes --no_build happy.
         "//conditions:default": "not-existing.lib",
@@ -16,18 +22,31 @@
 
 cc_library(
     name = "python_headers",
-    hdrs = [":python_include"],
+    hdrs = select({
+        ":chaquopy": [":chaquopy_python_include"],
+        "//conditions:default": [":python_include"],
+    }),
     deps = select({
+        ":chaquopy": [":python_lib"],
         ":windows": [":python_lib"],
         "//conditions:default": [],
     }),
-    includes = ["python_include"],
+    includes = select({
+        ":chaquopy": ["chaquopy_python_include"],
+        "//conditions:default": ["python_include"],
+    }),
 )
 
 cc_library(
     name = "numpy_headers",
-    hdrs = [":numpy_include"],
-    includes = ["numpy_include"],
+    hdrs = select({
+        ":chaquopy": [":chaquopy_numpy_include"],
+        "//conditions:default": [":numpy_include"],
+    }),
+    includes = select({
+        ":chaquopy": ["chaquopy_numpy_include"],
+        "//conditions:default": ["numpy_include"],
+    }),
 )
 
 config_setting(
@@ -38,4 +57,6 @@
 
 %{PYTHON_INCLUDE_GENRULE}
 %{NUMPY_INCLUDE_GENRULE}
+%{CHAQUOPY_PYTHON_INCLUDE_GENRULE}
+%{CHAQUOPY_NUMPY_INCLUDE_GENRULE}
 %{PYTHON_IMPORT_LIB_GENRULE}
diff -urN --no-dereference src-original/third_party/py/python_configure.bzl src/third_party/py/python_configure.bzl
--- src-original/third_party/py/python_configure.bzl	2018-08-23 19:58:44.000000000 +0000
+++ src/third_party/py/python_configure.bzl	2018-09-20 20:49:57.365222384 +0000
@@ -273,6 +273,12 @@
     )
     python_import_lib_genrule = ""
 
+    chaquopy_python_include = repository_ctx.os.environ["CHAQUOPY_PYTHON_INCLUDE_DIR"]
+    chaquopy_numpy_include = (repository_ctx.os.environ["SRC_DIR"] +
+                              "/../requirements/numpy/core/include/numpy")
+    chaquopy_python_include_rule = _symlink_genrule_for_dir(
+        repository_ctx, chaquopy_python_include, 'chaquopy_python_include', 'chaquopy_python_include')
+  
     # To build Python C/C++ extension on Windows, we need to link to python import library pythonXY.lib
     # See https://docs.python.org/3/extending/windows.html
     if _is_windows(repository_ctx):
@@ -282,17 +289,32 @@
             [python_import_lib_src],
             [python_import_lib_name],
         )
+
+    # Chaquopy: no point in generating separate host and target rules for libpython, because
+    # we'll never support building TensorFlow on Windows.
+    python_import_lib_name = "lib" + repository_ctx.os.environ["CHAQUOPY_PYTHON_LIB"] + ".so"
+    python_import_lib_src = (repository_ctx.os.environ["CHAQUOPY_PYTHON_INCLUDE_DIR"] +
+                             "/../../lib/" + python_import_lib_name)
+    python_import_lib_genrule = _symlink_genrule_for_dir(
+        repository_ctx, None, '', 'python_import_lib',
+        [python_import_lib_src], [python_import_lib_name])
+
     numpy_include_rule = _symlink_genrule_for_dir(
         repository_ctx,
         numpy_include,
         "numpy_include/numpy",
         "numpy_include",
     )
+    chaquopy_numpy_include_rule = _symlink_genrule_for_dir(
+        repository_ctx, chaquopy_numpy_include, 'chaquopy_numpy_include/numpy', 'chaquopy_numpy_include')
+
     _tpl(repository_ctx, "BUILD", {
         "%{PYTHON_BIN_PATH}": python_bin,
         "%{PYTHON_INCLUDE_GENRULE}": python_include_rule,
+        "%{CHAQUOPY_PYTHON_INCLUDE_GENRULE}": chaquopy_python_include_rule,
         "%{PYTHON_IMPORT_LIB_GENRULE}": python_import_lib_genrule,
         "%{NUMPY_INCLUDE_GENRULE}": numpy_include_rule,
+        "%{CHAQUOPY_NUMPY_INCLUDE_GENRULE}": chaquopy_numpy_include_rule,
     })
 
 def _create_remote_python_repository(repository_ctx, remote_config_repo):
--- src-original/third_party/sqlite.BUILD       2020-01-07 16:57:39.000000000 +0000
+++ src/third_party/sqlite.BUILD        2020-01-23 17:10:59.757380996 +0000
@@ -25,7 +25,7 @@
         "-DHAVE_FDATASYNC=1",
         "-DHAVE_GMTIME_R=1",
         "-DHAVE_LOCALTIME_R=1",
-        "-DHAVE_POSIX_FALLOCATE=1",
+        # "-DHAVE_POSIX_FALLOCATE=1",  # Chaquopy: requires API level 21
         "-DHAVE_USLEEP=1",
     ],
 })
