--- src-original/numba/caching.py       2020-01-29 15:21:49.000000000 +0000
+++ src/numba/caching.py        2020-07-26 21:33:10.601661853 +0000
@@ -162,7 +162,9 @@
     """
 
     def get_source_stamp(self):
-        if getattr(sys, 'frozen', False):
+        # Chaquopy: added True. The timestamp doesn't matter, as the importer will delete the
+        # whole AssetFinder tree whenever its corresponding ZIP changes.
+        if True or getattr(sys, 'frozen', False):
             st = os.stat(sys.executable)
         else:
             st = os.stat(self._py_file)
@@ -175,7 +177,7 @@
 
     @classmethod
     def from_function(cls, py_func, py_file):
-        if not os.path.exists(py_file):
+        if False and not os.path.exists(py_file):  # Chaquopy: disabled
             # Perhaps a placeholder (e.g. "<ipython-XXX>")
             return
         self = cls(py_func, py_file)
--- src-original/numba/npyufunc/parallel.py	2020-01-29 15:21:49.000000000 +0000
+++ src/numba/npyufunc/parallel.py	2020-02-08 22:41:35.162472017 +0000
@@ -288,7 +288,7 @@
     else:
         # windows uses spawn so is fine, linux uses fork has the lock
         _backend_init_process_lock = multiprocessing.RLock()
-except OSError as e:
+except (OSError, ImportError) as e:  # Chaquopy: added ImportError which is thrown by RLock().
 
     # probably lack of /dev/shm for semaphore writes, warn the user
     msg = ("Could not obtain multiprocessing lock due to OS level error: %s\n"
--- src-original/numba/targets/cpu.py	2020-01-29 15:21:49.000000000 +0000
+++ src/numba/targets/cpu.py	2020-02-12 23:11:23.057858562 +0000
@@ -52,7 +52,12 @@
 
         # Add ARM ABI functions from libgcc_s
         if platform.machine() == 'armv7l':
-            ll.load_library_permanently('libgcc_s.so.1')
+            # Chaquopy: see build-libgcc.sh.
+            import ctypes
+            from os.path import dirname, join
+            libgcc_filename = join(dirname(__file__), "libgcc_numba.so")
+            ctypes.CDLL(libgcc_filename, ctypes.RTLD_GLOBAL)  # Extract the file.
+            ll.load_library_permanently(libgcc_filename)  # CDLL isn't enough on its own.
 
         # Map external C functions.
         externals.c_math_functions.install(self)
--- src-original/setup.py	2020-01-29 15:21:49.000000000 +0000
+++ src/setup.py	2020-02-08 22:14:03.697531223 +0000
@@ -92,6 +92,12 @@
     """
     Return a list of Extension instances for the setup() call.
     """
+
+    # Chaquopy
+    import builtins
+    sys.path.insert(0, os.path.abspath("../requirements"))  # For numpy.distutils
+    builtins.__NUMPY_SETUP__ = True  # Prevent the rest of NumPy from being imported.
+
     # Note we don't import Numpy at the toplevel, since setup.py
     # should be able to run without Numpy for pip to discover the
     # build dependencies
@@ -309,6 +315,15 @@
     'setuptools',
 ]
 
+# Chaquopy: see build-libgcc.sh.
+if is_building() and os.environ["CHAQUOPY_ABI"] == "armeabi-v7a":
+    import subprocess
+    libgcc_name = "libgcc_numba.so"
+    subprocess.run([f"{os.environ['RECIPE_DIR']}/build-libgcc.sh",
+                    f"numba/targets/{libgcc_name}"], check=True)
+else:
+    libgcc_name = None
+
 metadata = dict(
     name='numba',
     description="compiling Python code using LLVM",
@@ -337,14 +353,15 @@
         "numba.runtime": ["*.c", "*.h"],
         "numba.cext": ["*.c", "*.h"],
         # numba gdb hook init command language file
-        "numba.targets": ["cmdlang.gdb"],
+        "numba.targets": ["cmdlang.gdb"] + \
+            [libgcc_name] if libgcc_name else [],  # Chaquopy
     },
     scripts=["numba/pycc/pycc", "bin/numba"],
     author="Anaconda, Inc.",
     author_email="numba-users@continuum.io",
     url="http://numba.github.com",
     packages=packages,
-    setup_requires=build_requires,
+    # Chaquopy: removed setup_requires=build_requires,
     install_requires=install_requires,
     python_requires=f">={min_python_version}",
     license="BSD",
