--- src-original/tensorflow/lite/tools/pip_package/setup.py	2021-05-12 13:26:41.000000000 +0000
+++ src/tensorflow/lite/tools/pip_package/setup.py	2021-09-14 20:43:35.431997208 +0000
@@ -31,6 +31,10 @@
 import sys
 import sysconfig
 
+# Chaquopy: Prevent the native parts of NumPy from being imported.
+import builtins
+builtins.__NUMPY_SETUP__ = True
+
 from distutils.command.build_ext import build_ext
 import numpy
 import pybind11
@@ -71,7 +75,8 @@
 # with more than 4GB, use all the CPUs, otherwise only 1.
 def get_build_cpus():
   physical_bytes = os.sysconf('SC_PAGESIZE') * os.sysconf('SC_PHYS_PAGES')
-  if physical_bytes < (1 << 30) * 4:
+  # Chaquopy: added False so we always use multiple CPUs.
+  if False and physical_bytes < (1 << 30) * 4:
     return 1
   else:
     return multiprocessing.cpu_count()
@@ -184,7 +189,7 @@
         os.path.join(DOWNLOADS_DIR, 'absl'),
         pybind11.get_include()
     ],
-    libraries=[LIB_TFLITE],
+    libraries=[LIB_TFLITE, "log"],  # Chaquopy: added "log"
     library_dirs=[LIB_TFLITE_DIR])
 
 setup(
--- src-original/tensorflow/lite/tools/make/Makefile	2021-05-12 13:26:41.000000000 +0000
+++ src/tensorflow/lite/tools/make/Makefile	2021-09-14 20:40:09.091829009 +0000
@@ -44,11 +44,16 @@
 -I$(MAKEFILE_DIR)/downloads/cpuinfo \
 -I$(MAKEFILE_DIR)/downloads/cpuinfo/include \
 -I$(MAKEFILE_DIR)/downloads/cpuinfo/src \
--I$(MAKEFILE_DIR)/downloads/cpuinfo/deps/clog/include \
--I$(OBJDIR)
+-I$(MAKEFILE_DIR)/downloads/cpuinfo/deps/clog/include
+# Chaquopy: OBJDIR hasn't been assigned yet, so this would previously have generated
+# "-I -I/usr/local/include", which would have no effect. But since we've removed the
+# /usr/local/include below, we have to remove this as well.
+# -I$(OBJDIR)
+
 # This is at the end so any globally-installed frameworks like protobuf don't
 # override local versions in the source tree.
-INCLUDES += -I/usr/local/include
+# Chaquopy: disabled
+# INCLUDES += -I/usr/local/include
 
 # These are the default libraries needed, but they can be added to or
 # overridden by the platform-specific settings in target makefiles.
@@ -62,7 +67,8 @@
 # There are no rules for compiling objects for the host system (since we don't
 # generate things like the protobuf compiler that require that), so all of
 # these settings are for the target compiler.
-CFLAGS := -O3 -DNDEBUG -DCPU_SETSIZE=__CPU_SETSIZE -fPIC $(EXTRA_CFLAGS)
+# Chaquopy: removed -DCPU_SETSIZE=__CPU_SETSIZE, since the latter symbol isn't defined on Android.
+CFLAGS := -O3 -DNDEBUG -fPIC $(EXTRA_CFLAGS)
 CXXFLAGS := $(CFLAGS) --std=c++11 $(EXTRA_CXXFLAGS)
 LDOPTS := -L/usr/local/lib
 ARFLAGS := -r
@@ -303,9 +309,10 @@
 MINIMAL_BINARY := $(BINDIR)minimal
 LABEL_IMAGE_BINARY := $(BINDIR)label_image
 
-CXX := $(CC_PREFIX)${TARGET_TOOLCHAIN_PREFIX}g++
-CC := $(CC_PREFIX)${TARGET_TOOLCHAIN_PREFIX}gcc
-AR := $(CC_PREFIX)${TARGET_TOOLCHAIN_PREFIX}ar
+# Chaquopy: disabled
+# CXX := $(CC_PREFIX)${TARGET_TOOLCHAIN_PREFIX}g++
+# CC := $(CC_PREFIX)${TARGET_TOOLCHAIN_PREFIX}gcc
+# AR := $(CC_PREFIX)${TARGET_TOOLCHAIN_PREFIX}ar
 
 MINIMAL_OBJS := $(addprefix $(OBJDIR), \
 $(patsubst %.cc,%.o,$(patsubst %.c,%.o,$(MINIMAL_SRCS))))
@@ -340,7 +347,8 @@
 	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@
 
 # The target that's compiled if there's no command-line arguments.
-all: $(LIB_PATH)  $(MINIMAL_BINARY) $(BENCHMARK_BINARY) $(BENCHMARK_PERF_OPTIONS_BINARY)
+# Chaquopy: disabled binaries because they fail to build.
+all: $(LIB_PATH)  # $(MINIMAL_BINARY) $(BENCHMARK_BINARY) $(BENCHMARK_PERF_OPTIONS_BINARY)
 
 # The target that's compiled for micro-controllers
 micro: $(LIB_PATH)
--- src-original/tensorflow/lite/profiling/platform_profiler.cc	2021-05-12 13:26:41.000000000 +0000
+++ src/tensorflow/lite/profiling/platform_profiler.cc	2021-09-15 09:17:27.036175684 +0000
@@ -32,7 +32,8 @@
 namespace profiling {
 
 std::unique_ptr<tflite::Profiler> MaybeCreatePlatformProfiler() {
-#if defined(__ANDROID__)
+// Chaquopy disabled: MaybeCreateATraceProfiler isn't included in the build.
+#if 0 && defined(__ANDROID__)
   return MaybeCreateATraceProfiler();
 #elif defined(SIGNPOST_PLATFORM_PROFILER)
   return MaybeCreateSignpostProfiler();
